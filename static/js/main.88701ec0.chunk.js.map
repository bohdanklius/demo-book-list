{"version":3,"sources":["api.js","components/BookForm/BookForm.jsx","components/Book/Book.jsx","components/BooksList/BooksList.jsx","components/Header/Header.jsx","App.jsx","index.jsx"],"names":["API","a","data","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","options","key","text","value","BookForm","setBooks","editedBook","setNavigationActive","useState","id","Date","now","bookTitle","authorName","category","ISBN","newBook","setNewBook","useEffect","hasError","setHasError","handleChange","event","target","name","Form","onSubmit","preventDefault","prevState","length","some","book","then","map","setBooksAPI","Group","widths","Field","className","onChange","control","Input","label","placeholder","Select","Button","Book","handleEdit","handleRemove","Table","Row","Cell","basic","color","content","onClick","removeBookAPI","BooksList","books","celled","Header","HeaderCell","Body","navigation","title","setEditedBook","type","DASHBOARD","BOOKFORM","App","navigationActive","bookId","filter","find","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88701ec0.chunk.js","sourcesContent":["/* eslint-disable import/prefer-default-export */\nconst API = 'http://localhost:3004/books';\n\nasync function setBooksAPI(data = {}) {\n  const response = await fetch(API, {\n    method: 'POST',\n    mode: 'cors',\n    cache: 'no-cache',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    redirect: 'follow',\n    referrerPolicy: 'no-referrer',\n    body: JSON.stringify(data),\n  });\n  return response.json();\n}\n\nconst removeBookAPI = (id) => {\n  fetch(`${API}/${id}`, {\n    method: 'DELETE',\n  })\n    .then((response) => response.text());\n};\n\nconst editBookAPI = (id, data) => {\n  fetch(`${API}/${id}`, {\n    method: 'PUT',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n    .then((response) => response.json());\n};\n\nconst getBooksAPI = () => fetch(API)\n  .then((response) => response.json())\n  .then((json) => json);\n\nexport {\n  getBooksAPI,\n  setBooksAPI,\n  removeBookAPI,\n  editBookAPI,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './BookForm.scss';\nimport {\n  Button,\n  Form,\n  Input,\n  Select,\n} from 'semantic-ui-react';\nimport { setBooksAPI, editBookAPI } from '../../api';\n\nconst options = [\n  { key: 0, text: 'Category', value: 'Category' },\n  { key: 1, text: 'Художня література', value: 'Художня література' },\n  { key: 2, text: 'Історія', value: 'Історія' },\n  { key: 3, text: 'Туризм', value: 'Туризм' },\n];\n\nexport const BookForm = ({ setBooks, editedBook, setNavigationActive }) => {\n  const [newBook, setNewBook] = useState({\n    id: Date.now(),\n    bookTitle: '',\n    authorName: '',\n    category: '',\n    ISBN: '',\n  });\n\n  useEffect(() => {\n    if (editedBook) {\n      setNewBook({ ...newBook, ...editedBook });\n    }\n  }, [editedBook]);\n\n  const [hasError, setHasError] = useState({\n    bookTitle: false,\n    authorName: false,\n    category: false,\n    ISBN: false,\n  });\n\n  const handleChange = (event) => {\n    const { value, name } = event.target;\n    setNewBook({ ...newBook, [name]: value });\n    setHasError({ ...hasError, [name]: false });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (newBook.bookTitle === '') {\n      setHasError((prevState) => ({ ...prevState, bookTitle: true }));\n    }\n\n    if (newBook.authorName === '') {\n      setHasError((prevState) => ({ ...prevState, authorName: true }));\n    }\n\n    if (newBook.category === '') {\n      setHasError((prevState) => ({ ...prevState, category: true }));\n    }\n\n    if (newBook.ISBN === '') {\n      setHasError((prevState) => ({ ...prevState, ISBN: true }));\n    }\n\n    if (newBook.id\n      && newBook.bookTitle.length && newBook.authorName.length && newBook.ISBN.length) {\n      setBooks((prevState) => {\n        if (prevState.some((book) => book.id === newBook.id)) {\n          editBookAPI(newBook.id, newBook);\n          return prevState.map((book) => (book.id === newBook.id ? newBook : book));\n        }\n        return [...prevState, newBook];\n      });\n\n      setBooksAPI(newBook);\n\n      setNewBook({\n        id: Date.now(),\n        bookTitle: '',\n        authorName: '',\n        category: '',\n        ISBN: '',\n      });\n\n      setNavigationActive('DASHBOARD');\n    }\n  };\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Group widths=\"equal\">\n        <Form.Field\n          className={hasError.bookTitle ? 'error' : ''}\n          value={newBook.bookTitle}\n          onChange={handleChange}\n          name=\"bookTitle\"\n          control={Input}\n          label=\"Book title\"\n          placeholder=\"Book title\"\n        />\n        <Form.Field\n          className={hasError.authorName ? 'error' : ''}\n          value={newBook.authorName}\n          onChange={handleChange}\n          name=\"authorName\"\n          control={Input}\n          label=\"Author name\"\n          placeholder=\"Author name\"\n        />\n        <Form.Field\n          className={hasError.category ? 'error' : ''}\n          value={newBook.category}\n          onChange={handleChange}\n          name=\"category\"\n          control={Select}\n          label=\"Category\"\n          options={options}\n          placeholder=\"Category\"\n        />\n        <Form.Field\n          className={hasError.ISBN ? 'error' : ''}\n          value={newBook.ISBN}\n          onChange={handleChange}\n          name=\"ISBN\"\n          control={Input}\n          label=\"ISBN\"\n          placeholder=\"ISBN\"\n        />\n      </Form.Group>\n\n      <Form.Field control={Button}>Add a Book</Form.Field>\n    </Form>\n  );\n};\n\nBookForm.propTypes = {\n  setBooks: PropTypes.func.isRequired,\n  editedBook: PropTypes.shape({\n    id: PropTypes.number,\n    bookTitle: PropTypes.string,\n    authorName: PropTypes.string,\n    category: PropTypes.string,\n    ISBN: PropTypes.string,\n  }).isRequired,\n  setNavigationActive: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Button, Table } from 'semantic-ui-react';\nimport { removeBookAPI } from '../../api';\n\nexport const Book = ({\n  id,\n  bookTitle,\n  authorName,\n  category,\n  ISBN,\n  handleEdit,\n  handleRemove,\n}) => (\n  <Table.Row>\n    <Table.Cell>{bookTitle}</Table.Cell>\n    <Table.Cell>{authorName}</Table.Cell>\n    <Table.Cell>{category}</Table.Cell>\n    <Table.Cell>{ISBN}</Table.Cell>\n    <Table.Cell>\n      <Button\n        basic\n        color=\"grey\"\n        content=\"Edit\"\n        onClick={() => handleEdit(id)}\n      />\n      <Button\n        basic\n        color=\"red\"\n        content=\"Delete\"\n        onClick={() => {\n          handleRemove(id);\n          removeBookAPI(id);\n        }}\n      />\n    </Table.Cell>\n  </Table.Row>\n);\n\nBook.propTypes = {\n  id: PropTypes.number.isRequired,\n  bookTitle: PropTypes.string.isRequired,\n  authorName: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n  ISBN: PropTypes.string.isRequired,\n  handleEdit: PropTypes.func.isRequired,\n  handleRemove: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport { Book } from '../Book';\n\nexport const BooksList = ({ books, handleEdit, handleRemove }) => (\n  <div className=\"books\">\n    <Table celled>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Name</Table.HeaderCell>\n          <Table.HeaderCell>Author</Table.HeaderCell>\n          <Table.HeaderCell>Category</Table.HeaderCell>\n          <Table.HeaderCell>ISBN</Table.HeaderCell>\n          <Table.HeaderCell>Action</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n\n        {books.map(({\n          id, bookTitle, authorName, category, ISBN,\n        }) => (\n          <Book\n            handleRemove={handleRemove}\n            handleEdit={handleEdit}\n            key={id}\n            id={id}\n            bookTitle={bookTitle}\n            authorName={authorName}\n            category={category}\n            ISBN={ISBN}\n          />\n        ))}\n      </Table.Body>\n\n    </Table>\n\n  </div>\n);\n\nBooksList.propTypes = {\n  books: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    bookTitle: PropTypes.string.isRequired,\n    authorName: PropTypes.string.isRequired,\n    category: PropTypes.string.isRequired,\n    ISBN: PropTypes.string.isRequired,\n  })).isRequired,\n  handleEdit: PropTypes.func.isRequired,\n  handleRemove: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Header.scss';\n\nconst navigation = [\n  { id: 1, title: 'Dashboard' },\n  { id: 2, title: 'Add a Book' },\n];\n\nconst DASHBOARD = 'DASHBOARD';\nconst BOOKFORM = 'BOOKFORM';\n\nexport const Header = ({ setNavigationActive, setEditedBook }) => (\n\n  <div className=\"header\">\n    {navigation.map(({ id, title }) => (\n      <button\n        onClick={() => {\n          if (id === 1) {\n            setNavigationActive(DASHBOARD);\n          } else {\n            setNavigationActive(BOOKFORM);\n          }\n          setEditedBook({});\n        }}\n        className=\"header__button\"\n        key={id}\n        type=\"button\"\n      >\n        {title}\n      </button>\n    ))}\n  </div>\n);\n\nHeader.propTypes = {\n  setNavigationActive: PropTypes.func.isRequired,\n  setEditedBook: PropTypes.func.isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { getBooksAPI } from './api';\nimport './App.css';\nimport { BookForm } from './components/BookForm';\nimport { BooksList } from './components/BooksList';\nimport { Header } from './components/Header';\n\nconst DASHBOARD = 'DASHBOARD';\nconst BOOKFORM = 'BOOKFORM';\n\nfunction App() {\n  const [books, setBooks] = useState([]);\n  const [navigationActive, setNavigationActive] = useState(DASHBOARD);\n  const [editedBook, setEditedBook] = useState({\n    id: Date.now(),\n    bookTitle: '',\n    authorName: '',\n    category: '',\n    ISBN: '',\n  });\n\n  useEffect(() => {\n    getBooksAPI()\n      .then((response) => setBooks(response));\n  }, []);\n\n  const handleEdit = (bookId) => {\n    setNavigationActive(BOOKFORM);\n    setEditedBook(books.find(({ id }) => id === bookId));\n  };\n\n  const handleRemove = (bookId) => {\n    setBooks(books.filter((book) => book.id !== bookId));\n  };\n\n  return (\n    <div>\n      <Header setNavigationActive={setNavigationActive} setEditedBook={setEditedBook} />\n      {navigationActive === DASHBOARD && (\n        <BooksList\n          handleRemove={handleRemove}\n          handleEdit={handleEdit}\n          books={books}\n        />\n      )}\n\n      {navigationActive === BOOKFORM && (\n        <BookForm\n          setNavigationActive={setNavigationActive}\n          setBooks={setBooks}\n          editedBook={editedBook}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}